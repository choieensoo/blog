---
layout: post
title:  "연산자"
date:   2023-08-27
last_modified_at: 2023-08-27
categories: [Jekyll Paper]
tags: [Getting Start]
---

<h1>연산자<h2>

```
산술 연산자 (Arithmetic Operators):

+ (덧셈)
- (뺄셈)
* (곱셈)
/ (나눗셈)
% (나머지)
```
```
비교 연산자 (Comparison Operators):

== (동등 비교)
!= (부등 비교)
> (크다)
< (작다)
>= (크거나 같다)
<= (작거나 같다)
```
```
논리 연산자 (Logical Operators):

&& (논리 AND)
|| (논리 OR)
! (논리 NOT)
```
```
대입 연산자 (Assignment Operators):

= (대입)
+= (덧셈 후 대입)
-= (뺄셈 후 대입)
*= (곱셈 후 대입)
/= (나눗셈 후 대입)
%= (나머지 후 대입)
```
```
증감 연산자 (Increment/Decrement Operators):

++ (증가)
-- (감소)
비트 연산자 (Bitwise Operators):

& (비트 AND)
| (비트 OR)
^ (비트 XOR)
~ (비트 NOT)
<< (왼쪽 시프트)
>> (오른쪽 시프트)
>>> (부호 없는 오른쪽 시프트)
```
```
삼항 연산자 (Ternary Operator):

조건식 ? 표현식1 : 표현식2 (조건에 따라 두 표현식 중 하나를 선택)
인스턴스 연산자 (Instanceof Operator):

instanceof (객체가 특정 클래스의 인스턴스인지 확인)
```

<h1>연산자 사용 예제<h2>

```
int x = 5;
int y = 10;
int z = x + y; // 덧셈 연산자를 사용하여 변수 x와 y의 값을 더합니다.

boolean result = (x > y) && (x != y); // 논리 곱(&&) 연산자를 사용하여 변수 x가 변수 y보다 크고 x와 y가 서로 다른지를 평가합니다.
                                                            
int count = 0;
count++; // 증가 연산자를 사용하여 변수 count의 값을 1 증가시킵니다.

```